name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-default:
    name: Test Default (Local Ollama)
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker images
      run: docker compose build
    
    - name: Test Local Ollama configuration
      env:
        PROBLEM: "Calculate the sum of numbers 1 to 5"
      run: |
        echo "‚úÖ Testing Local Ollama (build only - requires GPU for full test)"
        echo "‚ö†Ô∏è Full local model test requires GPU, skipping execution in CI"
        docker compose config
        echo "‚úÖ Compose configuration valid"
    
    - name: Cleanup
      run: docker compose down -v

  test-openai:
    name: Test OpenAI Configuration
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker images
      run: docker compose build
    
    - name: Test OpenAI configuration
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        PROBLEM: "Calculate the sum of numbers 1 to 5"
      run: |
        if [ -n "$OPENAI_API_KEY" ]; then
          echo "‚úÖ Testing OpenAI configuration with live API"
          timeout 120s docker compose -f compose.yaml -f compose.openai.yaml up --abort-on-container-exit || true
          echo "‚úÖ OpenAI demo completed (or timed out safely)"
        else
          echo "‚ö†Ô∏è OPENAI_API_KEY not set, testing configuration only"
          docker compose -f compose.yaml -f compose.openai.yaml config
          echo "‚úÖ OpenAI compose configuration valid"
        fi
    
    - name: Check output files were created
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        if [ -n "$OPENAI_API_KEY" ]; then
          ls -la output/ || echo "Output directory not found"
          if [ -f output/result.txt ]; then
            echo "‚úÖ Result file created"
            head -10 output/result.txt
          else
            echo "‚ö†Ô∏è Result file not found"
          fi
        fi
    
    - name: Cleanup
      run: docker compose -f compose.yaml -f compose.openai.yaml down -v

  test-offload:
    name: Test Docker Offload Configuration
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker images
      run: docker compose build
    
    - name: Test Docker Offload configuration
      env:
        DOCKER_OFFLOAD_TOKEN: ${{ secrets.DOCKER_OFFLOAD_TOKEN }}
      run: |
        if [ -n "$DOCKER_OFFLOAD_TOKEN" ]; then
          echo "‚úÖ Testing Docker Offload configuration with live token"
          docker compose -f compose.yaml -f compose.offload.yaml config
          echo "‚úÖ Docker Offload configuration valid"
          # Note: Not running live test as Offload may not be available in CI
        else
          echo "‚ö†Ô∏è DOCKER_OFFLOAD_TOKEN not set, testing configuration only"
          docker compose -f compose.yaml -f compose.offload.yaml config
          echo "‚úÖ Docker Offload compose configuration valid"
        fi
    
    - name: Cleanup
      run: docker compose -f compose.yaml -f compose.offload.yaml down -v

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 coding-agent.py --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 coding-agent.py --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Check formatting with black
      run: |
        black --check --diff coding-agent.py

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  validate-compose:
    name: Validate All Compose Files
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate compose files
      run: |
        echo "üîç Validating all compose configurations..."
        
        echo "‚úÖ Default configuration:"
        docker compose config --quiet
        
        echo "‚úÖ OpenAI configuration:"
        docker compose -f compose.yaml -f compose.openai.yaml config --quiet
        
        echo "‚úÖ Docker Offload configuration:"
        docker compose -f compose.yaml -f compose.offload.yaml config --quiet
        
        echo "‚úÖ All compose files are valid!"

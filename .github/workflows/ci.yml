name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker images
      run: docker-compose build
    
    - name: Test basic functionality
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        PROBLEM: "Calculate the sum of numbers 1 to 10"
      run: |
        if [ -n "$OPENAI_API_KEY" ]; then
          timeout 120s docker-compose up --abort-on-container-exit || true
          echo "✅ Demo completed (or timed out safely)"
        else
          echo "⚠️ OPENAI_API_KEY not set, skipping live test"
          echo "✅ Build test passed"
        fi
    
    - name: Cleanup
      run: docker-compose down -v
    
    - name: Check output files were created
      run: |
        if [ -n "$OPENAI_API_KEY" ]; then
          ls -la output/ || echo "Output directory not found"
          if [ -f output/result.txt ]; then
            echo "✅ Result file created"
            head -10 output/result.txt
          else
            echo "⚠️ Result file not found"
          fi
        fi

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 coding-agent.py --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 coding-agent.py --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Check formatting with black
      run: |
        black --check --diff coding-agent.py

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
